module InterLibraryLoans where 

import LibraryBook

-- import DA.Time
import DA.List (sort)


template BatchLibraryLoanRequest
    with
        requestingLibrary : Party
        lendingLibrary : Party
        books : [BookDetails]
        requestedUntil : Time
    where
        signatory requestingLibrary
        observer lendingLibrary

        choice ApproveLoan : ContractId BatchLibraryDeliverable
            controller lendingLibrary
            do
                create BatchLibraryDeliverable with 
                    requestingLibrary
                    lendingLibrary
                    books
                    dueDate = requestedUntil

        -- choice ExtendLoan : ContractId BatchLibraryDeliverable
        --     with extraDays : Int
        --     controller lendingLibrary
        --     do
        --         let newDueDate = addRelTime dueDate (days extraDays)
        --         create this with dueDate = newDueDate

        -- choice ReturnLoanedBooks : ContractId LibraryBook
        --     with returnedBooks : [BookDetails]
        --     controller requestingLibrary
        --     do
        --         create LibraryBook with details = head returnedBooks, library = lendingLibrary
        
        choice RejectLoan : ()
            controller lendingLibrary
            do
                return ()

template BatchLibraryDeliverable
    with
        requestingLibrary : Party
        lendingLibrary : Party
        books : [BookDetails]
        dueDate : Time
    where 
        signatory lendingLibrary, requestingLibrary 

        choice Deliver : ContractId DeliveredBooks
            with
                bookIds : [ContractId LibraryBook]
            controller lendingLibrary
            do
                --verify all books match the request--
                bookData <- mapA fetch bookIds 
                let 
                    sortedBookDetails = sort books 
                    bookDataDetails = map (\d -> d.details) bookData
                    sortedBookDataDetails = sort bookDataDetails

                --transfer each book to the requesting library and archive the original--
                transferredBooks <- mapA (\bookId -> do
                    book <- exercise bookId Transfer with newLibrary = requestingLibrary
                    return book) bookIds 
                create DeliveredBooks with ..

template DeliveredBooks
    with
        requestingLibrary : Party
        lendingLibrary : Party
        books : [BookDetails]
        dueDate : Time
        transferredBooks : [ContractId LibraryBook]
    where
        signatory requestingLibrary, lendingLibrary



        











module InterLibraryLoans where 

import LibraryBook

-- import DA.Time
import DA.List (sort)
import DA.Assert ((===))


template BatchLibraryLoanRequest
    with
        requestingLibrary : Party
        lendingLibrary : Party
        books : [BookDetails]
        requestedUntil : Time
    where
        signatory requestingLibrary
        observer lendingLibrary

        choice ApproveLoan : ContractId BatchLibraryDeliverable
            controller lendingLibrary
            do
                create BatchLibraryDeliverable with 
                    requestingLibrary
                    lendingLibrary
                    books
                    dueDate = requestedUntil
        
        choice RejectLoan : ()
            controller lendingLibrary
            do
                return ()

template BatchLibraryDeliverable
    with
        requestingLibrary : Party
        lendingLibrary : Party
        books : [BookDetails]
        dueDate : Time
    where 
        signatory lendingLibrary, requestingLibrary 

        choice Deliver : ContractId InterLibraryLoan
            with
                bookIds : [ContractId LibraryBook]
            controller lendingLibrary
            do
                bookData <- mapA fetch bookIds 
                let 
                    sortedBookDetails = sort books 
                    bookDataDetails = map (\d -> d.details) bookData
                    sortedBookDataDetails = sort bookDataDetails

                sortedBookDataDetails === bookDataDetails

                transferredBooks <- mapA (\bookId -> do
                    bookOffer <- exercise bookId OfferCustody with newLibrary = requestingLibrary
                    exercise bookOffer AcceptCustodyOffer
                    ) bookIds 
                create InterLibraryLoan with ..

template InterLibraryLoan
    with
        requestingLibrary : Party
        lendingLibrary : Party
        books : [BookDetails]
        dueDate : Time
        transferredBooks : [ContractId LibraryBook]
    where
        signatory requestingLibrary, lendingLibrary

        -- choice Return : 




        











module InterLibraryLoans where 

import LibraryBook

import Daml.Script
import DA.Time
import DA.List (head)


template BatchLibraryLoanRequest
    with
        requestingLibrary : Party
        lendingLibrary : Party
        books : [BookDetails]
        requestedUntil : Time
    where
        signatory requestingLibrary
        observer lendingLibrary

        choice ApproveLoan : ContractId BatchLibraryDeliverable
            controller lendingLibrary
            do
                create BatchLibraryDeliverable with 
                    requestingLibrary
                    lendingLibrary
                    books
                    dueDate = requestedUntil
        
        -- insert ApprovePartialLoan here - what if the lendingLibrary is willing to lend only some of the requested books? --

        choice RejectLoan : ()
            controller lendingLibrary
            do
                return ()

template BatchLibraryDeliverable
    with
        requestingLibrary : Party
        lendingLibrary : Party
        books : [BookDetails]
        dueDate : Time
    where 
        signatory lendingLibrary, requestingLibrary -- both institutions have to sign off on the BatchLibraryDeliverable

        choice Deliver : ContractId DeliveredBooks
            with
                bookIds : [ContactId LibraryBook]
            controller lendingLibrary
            do
                bookData <- mapA fetch bookIds 
                let 
                    sortedBookDetails = sort books 
                    bookDataDetails = map (\d -> d.details) bookData
                    sortedBookDataDetails = sort bookDataDetails

                assert sortedBoookDataDetails == sortedBookDetails 

                deliveredBooks <- mapA (\bookId -> do 
                    -- this is where we do the archival and the transfer ) bookIds. Could be only two lines. As a hint, the Library Book module may have to introduce choices to transfer to another library. Give a book the ability to be transferred to another library.
                return DeliveredBooks 












        -- choice ExtendLoan : ContractId BatchLibraryDeliverable
        --     with extraDays : Int
        --     controller lendingLibrary
        --     do
        --         let newDueDate = addRelTime dueDate (days extraDays)
        --         create this with dueDate = newDueDate

        -- choice ReturnLoanedBooks : ContractId LibraryBook
        --     with returnedBooks : [BookDetails]
        --     controller requestingLibrary
        --     do
        --         create LibraryBook with details = head returnedBooks, library = lendingLibrary
            --what if only some of the books are returned? Create a new agreement with the ones that remain outstanding? Probably still a part of the ReturnedLoanedBooks choice but...will make it a little more nuanced.--
module Test.LibraryBookTest where

import Daml.Script
import LibraryBook
import DA.Date
import DA.Time
import InterLibraryLoans
import DA.List (head)

libraryAcceptScenario : Script ()

libraryAcceptScenario = script do 
    library <- allocateParty "Columbus Metropolitan Library"
    borrower <- allocateParty "Stefan"

    let bookDetails = BookDetails with
            title = "Blue Highways"
            author = "William Least Heat-Moon"
            isbn = "987654321"

    libraryBookCid <- submit library do
        createCmd LibraryBook with 
            details = bookDetails
            library = library 

    currentTime <- getTime
    let dueDate = date 1970 Jan 14
    let expiration = addRelTime currentTime (minutes 15)

    offeredBookCid <- submit library do
        exerciseCmd libraryBookCid Offer with
            borrower = borrower
            dueDate = dueDate
            expiration = expiration

    acceptedBookCid <- submit borrower do
        exerciseCmd offeredBookCid Accept

    pure ()

libraryDeclineScenario = script do 
    library <- allocateParty "Columbus Metropolitan Library"
    borrower <- allocateParty "Stefan"

    let bookDetails = BookDetails with
            title = "Blue Highways"
            author = "William Least Heat-Moon"
            isbn = "987654321"

    libraryBookCid <- submit library do
        createCmd LibraryBook with 
            details = bookDetails
            library = library 

    currentTime <- getTime
    let dueDate = date 1970 Jan 14
    let expiration = addRelTime currentTime (minutes 15)

    offeredBookCid <- submit library do
        exerciseCmd libraryBookCid Offer with
            borrower = borrower
            dueDate = dueDate
            expiration = expiration

    declinedBookCid <- submit borrower do
        exerciseCmd offeredBookCid Decline

    pure ()

expireScenario = script do
    library <- allocateParty "Columbus Metropolitan Library"
    borrower <- allocateParty "Stefan"

    let bookDetails = BookDetails with
            title = "Blue Highways"
            author = "William Least Heat-Moon"
            isbn = "987654321"

    libraryBookCid <- submit library do
        createCmd LibraryBook with 
            details = bookDetails
            library = library 

    currentTime <- getTime
    let dueDate = date 1970 Jan 14
    let expiration = addRelTime currentTime (minutes 15)

    offeredBookCid <- submit library do
        exerciseCmd libraryBookCid Offer with
            borrower = borrower
            dueDate = dueDate
            expiration = expiration

    setTime (addRelTime currentTime (minutes 16)) --ensure that correct period of time has passed before exercising the Expire choice on the offeredLibraryBook.

    declinedBookCid <- submit library do
        exerciseCmd offeredBookCid Expire
    
    pure ()

transferScenario = script do 
    library <- allocateParty "Columbus Metropolitan Library"
    requestingLibrary <- allocateParty "Morgan Library"
    borrower <- allocateParty "Stefan"
    currentTime <- getTime

    let bookDetails1 = BookDetails with
            title = "Blue Highways"
            author = "William Least Heat-Moon"
            isbn = "987654321"

    let bookDetails2 = BookDetails with 
            title = "The Suffering Stranger"
            author = "Donna Orange"
            isbn = "123456789"

    libraryBookCid1 <- submit library do
        createCmd LibraryBook with 
            details = bookDetails1
            library = library 
    
    libraryBookCid2 <- submit library do
        createCmd LibraryBook with
            details = bookDetails2
            library = library
            
    batchedRequest <- submit requestingLibrary do
        createCmd BatchLibraryLoanRequest with
            lendingLibrary = library
            requestingLibrary = requestingLibrary
            books = [bookDetails1, bookDetails2]
            requestedUntil = currentTime

    approvedLoan <- submit library do
        exerciseCmd batchedRequest ApproveLoan 

    deliveredBooks <- submit library do
        exerciseCmd approvedLoan Deliver with
            bookIds = [libraryBookCid1, libraryBookCid2]

    pure ()


transferAndReturnScenario : Script ()
transferAndReturnScenario = script do
    library <- allocateParty "Columbus Metropolitan Library"
    requestingLibrary <- allocateParty "The Great Library of Alexandria"
    borrower <- allocateParty "Danny DeVito"
    
    currentTime <- getTime
    let dueDate = date 970 Jan 15
    let expiration = addRelTime currentTime (minutes 15)
    let requestedReturnDate = addRelTime currentTime (days 42)

    let bookDetails1 = BookDetails with
            title = "The Art of French Cooking"
            author = "Julia Child"
            isbn = "69696969"

    let bookDetails2 = BookDetails with
            title = "The Hitchhiker's Guide to the Galaxy"
            author = "Douglass Adams"
            isbn = "42"

    libraryBookCid1 <- submit library do
        createCmd LibraryBook with 
            details = bookDetails1
            library = library 
    
    libraryBookCid2 <- submit library do
        createCmd LibraryBook with
            details = bookDetails2
            library = library

    batchedRequest <- submit requestingLibrary do
        createCmd BatchLibraryLoanRequest with 
            lendingLibrary = library
            requestingLibrary = requestingLibrary
            books = [bookDetails1, bookDetails2]
            requestedUntil = requestedReturnDate

    approvedLoan <- submit library do 
        exerciseCmd batchedRequest ApproveLoan 

    deliveredBooks <- submit library do
        exerciseCmd approvedLoan Deliver with
            bookIds = [libraryBookCid1, libraryBookCid2]

    interLibraryLoanDataOpt <- queryContractId requestingLibrary deliveredBooks
    case interLibraryLoanDataOpt of 
        Some interLibraryLoanData -> do 
                case interLibraryLoanData.transferredBooks of 
                    [libraryBookCid1, libraryBookCid2] -> do 
                        submit requestingLibrary do 
                            exerciseCmd libraryBookCid1 Offer with
                                borrower = borrower 
                                dueDate = dueDate 
                                expiration = expiration
                        pure()
                    _ -> pure ()

                pure()
        None -> pure()


    pure ()
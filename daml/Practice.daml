module Practice where

let x : Int
x = 42

let y : Text
y = "Hello, world."

data Person = Person with 
    name : Text
    age : Int

alice : Person 
alice = Person with
    name = "Alice"
    age = 30

incrementAge : Person -> Person
incrementAge = Person name (age+1)


-- Declare an Int variable a with a value of 10

let a : Int
a = 10

-- Declare a text variable b with a value of "Daml"

let b : Text
b = "Daml"

-- Declare a Bool variable c with a value of True

let c : Bool
c = True

addFive : Int -> Int
addFive z = z + 5

concatenateText : Text -> Text -> Text
concatenateText t1 t2 = t1 ++ t2

result = concatenateText b " is fun!" 



-- Define a record type Book with fields title (Text) and yearPublished (Int)

data Book = Book with
    title : Text
    yearPublished : Int

book1 : Book
book1 = Book with 
    title = "Daml by Example"
    yearPublished = 2021

book2 : Book
book2 = Book with 
    title = "Learning Daml"
    yearPublished = 2022

isRecent : Book -> Bool
isRecent (Book _ year) = year > 2020

recent1 : Bool
recent1 = isRecent book1

--Declare a list of integers numbers with values [1,2,3,4,5]. Write a function sumList that takes a list of integers and returns their sum.

numbers : [Int]
numbers = [1,2,3,4,5]

sumList : [Int] -> Int
sumList numbers = foldl (+) 0 numbers


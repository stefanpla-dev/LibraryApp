module LibraryBook where --defines the module name LibraryBook where the app logic resides

import Daml.Script
import DA.Time
import DA.Assert

data BookDetails = BookDetails 
    with
        title : Text
        author : Text
        isbn : Text
    deriving (Eq, Show) -- 

template LibraryBook --defines LibraryBook contract structure
    with --declares the contract's fields (text for title/author, Party for parties)
        details : BookDetails
        library : Party
    where
        signatory library --authorization: who can do what

        choice CheckOut : ContractId CheckedOutLibraryBook--defines the CheckOut choice. Returns a new LibraryBook contract ID
            with -- additional parameters
                borrower : Party
                dueDate : Time

            controller library --party authoirzed to exercise the cohice
            do
                checkedOut <- getTime
                create CheckedOutLibraryBook 
                    with 
                        dueDate
                        checkedOut
                        ..

template CheckedOutLibraryBook
    with
        details : BookDetails
        library : Party
        borrower : Party
        dueDate : Time
        checkedOut : Time
    where 
        signatory library, borrower

        choice Return : ContractId LibraryBook
            controller borrower
            do
                create LibraryBook with ..
                        -- details  -- left pertains to LibraryBook, right to CheckedOutLibraryBook
                        -- library 
                        -- borrower
                        -- dueDate 
                        -- checkedOut 

libraryTestScenario = script do 
    library <- allocateParty "Columbus Metropolitan Library"
    borrower <- allocateParty "Stefan"

    let bookDetails = BookDetails with
            title = "Blue Highways"
            author = "William Least Heat-Moon"
            isbn = "987654321"

    libraryBookCid <- submit library do
        createCmd LibraryBook with 
            details = BookDetails
            library = library 

    do
        currentTime <- getTime
        let dueDate = addRelTime currentTime (days 14)
        pure dueDate

    checkedOutBookCid <- submit library do
        exerciseCmd libraryBookCid CheckOut with
            borrower = borrower
            dueDate = dueDate
    
    checkedOutBook <- queryContractId borrower checkedOutBookCid
    assert (checkedOutBook.details === bookDetails)
    assert (checkedOutBook.borrower === borrower)
    assert (checkedOutBook.library ===library)
    assert (checkedOutBook.dueDate === dueDate)

    pure ()


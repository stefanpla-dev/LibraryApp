module LibraryBook where --defines the module name LibraryBook where the app logic resides

import Daml.Script
import DA.Time
import DA.Assert

data BookDetails = BookDetails 
    with
        title : Text
        author : Text
        isbn : Text
    deriving (Eq, Show)


template LibraryBook --defines LibraryBook contract structure
    with --declares the contract's fields (text for title/author, Party for parties)
        details : BookDetails
        library : Party
    where
        signatory library --authorization: who can do what

        choice Offer : ContractId OfferedLibraryBook
            with 
                borrower : Party
                dueDate : Time
                expiration : Time
            controller library
            do
                create OfferedLibraryBook with ..


template OfferedLibraryBook
    with 
        details : BookDetails
        library : Party
        borrower : Party
        dueDate : Time
        expiration : Time --added to create Expire choice below.
    where   
        signatory library
        observer borrower

        choice Accept : ContractId CheckedOutLibraryBook
            controller borrower
            do
                checkedOut <- getTime
                assert (checkedOut <= expiration)
                create CheckedOutLibraryBook with ..

        choice Decline : ContractId LibraryBook
            controller borrower
            do
                create LibraryBook with ..

        choice Expire : ContractId LibraryBook --if a certain period of time passes without action, then the library can exercise its Expire choice and create a DeclinedLibraryBook. test below.
            controller library
            do
                now <- getTime
                assert (now >= expiration) 
                create LibraryBook with ..


template CheckedOutLibraryBook
    with
        details : BookDetails
        library : Party
        borrower : Party
        dueDate : Time
        checkedOut : Time
    where 
        signatory library, borrower

        choice Return : ContractId LibraryBook
            controller borrower
            do
                create LibraryBook with ..
        
        choice ChargeLateFee : ContractId OverdueLibraryBook
            controller library
            do
                now <- getTime
                assert (now >= dueDate)
                create OverdueLibraryBook with fee, ..


template OverdueLibraryBook
    with
        details : BookDetails
        library : Party
        borrower : Party
        dueDate : Time
        checkedOut : Time
        fee : Int
    where 
        signatory library
        observer borrower

        choice IncrementFee : ContractId OverdueLibraryBook
            controller library
            do
                now <- getTime
                let daysLate = timeDifferenceDays now dueDate -- pseudocode at this time, what I really want is a function timeDifferenceDays that will calculate the difference between now and dueDate.
                let newFee = fee + (daysLate * 2) -- $2 per day late fee 
                create OverdueLibraryBook with fee = newFee, ..

        choice PayFee : ContractId OverdueLibraryBook 
            controller borrower
            do
                create OverdueLibraryBook with fee = 0, .. -- payment processing?

        choice ReturnOverdueBook : ContractId LibraryBook
            controller borrower 
            do
                assert (fee === 0)
                create LibraryBook with ..

libraryAcceptScenario = script do 
    library <- allocateParty "Columbus Metropolitan Library"
    borrower <- allocateParty "Stefan"

    let bookDetails = BookDetails with
            title = "Blue Highways"
            author = "William Least Heat-Moon"
            isbn = "987654321"

    libraryBookCid <- submit library do
        createCmd LibraryBook with 
            details = bookDetails
            library = library 

    currentTime <- getTime
    let dueDate = addRelTime currentTime (days 14)
    let expiration = addRelTime currentTime (minutes 15)

    offeredBookCid <- submit library do
        exerciseCmd libraryBookCid Offer with
            borrower = borrower
            dueDate = dueDate
            expiration = expiration

    acceptedBookCid <- submit borrower do
        exerciseCmd offeredBookCid Accept

    pure ()

--needed new test scenario as the test above archives the contract once the Accept choice is exercised.
libraryDeclineScenario = script do 
    library <- allocateParty "Columbus Metropolitan Library"
    borrower <- allocateParty "Stefan"

    let bookDetails = BookDetails with
            title = "Blue Highways"
            author = "William Least Heat-Moon"
            isbn = "987654321"

    libraryBookCid <- submit library do
        createCmd LibraryBook with 
            details = bookDetails
            library = library 

    currentTime <- getTime
    let dueDate = addRelTime currentTime (days 14)
    let expiration = addRelTime currentTime (minutes 15)

    offeredBookCid <- submit library do
        exerciseCmd libraryBookCid Offer with
            borrower = borrower
            dueDate = dueDate
            expiration = expiration

    declinedBookCid <- submit borrower do
        exerciseCmd offeredBookCid Decline

    pure ()

expireScenario = script do
    library <- allocateParty "Columbus Metropolitan Library"
    borrower <- allocateParty "Stefan"

    let bookDetails = BookDetails with
            title = "Blue Highways"
            author = "William Least Heat-Moon"
            isbn = "987654321"

    libraryBookCid <- submit library do
        createCmd LibraryBook with 
            details = bookDetails
            library = library 

    currentTime <- getTime
    let dueDate = addRelTime currentTime (days 14)
    let expiration = addRelTime currentTime (minutes 15)

    offeredBookCid <- submit library do
        exerciseCmd libraryBookCid Offer with
            borrower = borrower
            dueDate = dueDate
            expiration = expiration

    setTime (addRelTime currentTime (minutes 16)) --ensure that correct period of time has passed before exercising the Expire choice on the offeredLibraryBook.

    declinedBookCid <- submit library do
        exerciseCmd offeredBookCid Expire
    
    pure ()


-- New branch on 2/24/25 regarding Late Fees. This could play out in a few ways. A fee could be charged when a book is returned past the due date, or could the library somehow "flag" when a book is overdue. Furthermore, could we incrememnt a fee based on how far past the due date we are? Daml can't trigger anything based on a time, but it can give the library the choice to do so under specific enforceable conditions. 

-- ChargeLateFee (or something like that) could be a choice on a CheckedOutLibraryBook that can be exercised by the library when the dueDate has passed. This could create an OverdueLibraryBook, where the library can make an IncrementFee choice depending on how far passed the due date we are. OverdueBook should also have a return choice - presumably the OverdueBook will eventually be returned. 

--What about a LateFeesLedger? Does the library want to keep track of how much in fees they have outstanding and to which borrowers those fees correspond?
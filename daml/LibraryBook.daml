module LibraryBook where --defines the module name LibraryBook where the app logic resides

import Daml.Script
import DA.Time

data BookDetails = BookDetails 
    with
        title : Text
        author : Text
        isbn : Text
    deriving (Eq, Show)

template LibraryBook --defines LibraryBook contract structure
    with --declares the contract's fields (text for title/author, Party for parties)
        details : BookDetails
        library : Party
    where
        signatory library --authorization: who can do what


        choice Offer : ContractId OfferedLibraryBook
            with 
                dueDate : Time
                borrower : Party

            controller library
            do
                create OfferedLibraryBook with ..


template OfferedLibraryBook
    with 
        details : BookDetails
        library : Party
        borrower : Party
        dueDate : Time
    where   
        signatory library
        observer borrower

        choice Accept : ContractId CheckedOutLibraryBook
            controller borrower
            do
                checkedOut <- getTime
                create CheckedOutLibraryBook with ..


template CheckedOutLibraryBook
    with
        details : BookDetails
        library : Party
        borrower : Party
        dueDate : Time
        checkedOut : Time
    where 
        signatory library, borrower

        choice Return : ContractId LibraryBook
            controller borrower
            do
                create LibraryBook with ..


libraryTestScenario = script do 
    library <- allocateParty "Columbus Metropolitan Library"
    borrower <- allocateParty "Stefan"

    let bookDetails = BookDetails with
            title = "Blue Highways"
            author = "William Least Heat-Moon"
            isbn = "987654321"

    libraryBookCid <- submit library do
        createCmd LibraryBook with 
            details = bookDetails
            library = library 

    currentTime <- getTime
    let dueDate = addRelTime currentTime (days 14)

    offeredBookCid <- submit library do
        exerciseCmd libraryBookCid Offer with
            borrower = borrower
            dueDate = dueDate

    acceptedBookCid <- submit borrower do
        exerciseCmd offeredBookCid Accept

    pure ()


--what if the borrower declines the offer?

--what if the offered book remains in limbo? the borrower neither declines nor accepts? 

--leventebarczyda 

module LibraryBook where 

import DA.Time
import DA.Date (addDays, datetime, toGregorian)
import DA.Numeric (roundNumeric)

data BookDetails = BookDetails 
    with
        title : Text
        author : Text
        isbn : Text
    deriving (Eq, Show, Ord)


template LibraryBook 
    with 
        details : BookDetails
        library : Party
    where
        signatory library 

        choice Offer : ContractId OfferedLibraryBook
            with 
                borrower : Party
                dueDate : Date
                expiration : Time
            controller library
            do
                let 
                    (year, month, day) = toGregorian $ dueDate `addDays` 1
                    due = datetime year month day 4 0 0 
                create OfferedLibraryBook with ..

        choice OfferCustody : ContractId CustodyOffer
            with
                newLibrary : Party
            controller library
            do
                create CustodyOffer with ..



template OfferedLibraryBook
    with 
        details : BookDetails
        library : Party
        borrower : Party
        due : Time
        expiration : Time 
    where   
        signatory library
        observer borrower

        choice Accept : ContractId CheckedOutLibraryBook
            controller borrower
            do
                checkedOut <- getTime
                assert (checkedOut <= expiration)
                create CheckedOutLibraryBook with ..

        choice Decline : ContractId LibraryBook
            controller borrower
            do
                create LibraryBook with ..

        choice Expire : ContractId LibraryBook 
            controller library
            do
                now <- getTime
                assert (now >= expiration) 
                create LibraryBook with ..


template CheckedOutLibraryBook
    with
        details : BookDetails
        library : Party
        borrower : Party
        due : Time
        checkedOut : Time
    where 
        signatory library, borrower

        choice Return : ContractId LibraryBook
            controller borrower
            do
                create LibraryBook with ..
        
        choice ChargeLateFee : ContractId OverdueLibraryBook
            controller library
            do
                now <- getTime
                assert (now >= due)
                create OverdueLibraryBook with lastAccruedDate = now, fee = 0, ..

template OverdueLibraryBook
    with
        details : BookDetails
        library : Party
        borrower : Party
        due : Time
        checkedOut : Time
        lastAccruedDate : Time
        fee : Int
    where 
        signatory library
        observer borrower

        choice IncrementFee : ContractId OverdueLibraryBook
            controller library
            do
                now <- getTime
                let relDiff = now `subTime` due -- returns time offset between two instances as a RelTime
                
                let totalMicroseconds = convertRelTimeToMicroseconds relDiff -- convert that RelTime to microseconds
                let microsecondsPerDay = convertRelTimeToMicroseconds (days 1)

                let daysLateNumeric : Decimal = (intToNumeric totalMicroseconds) / (intToNumeric microsecondsPerDay)

                let daysLate = truncate (roundNumeric 0 RoundingCeiling daysLateNumeric)
                
                let newFee = fee + (daysLate * 2) -- $2 per day late fee 
                
                create OverdueLibraryBook with fee = newFee, lastAccruedDate = now, ..

        choice PayFee : ContractId OverdueLibraryBook 
            controller borrower
            do
                create OverdueLibraryBook with fee = 0, .. -- payment processing?

        choice ReturnOverdueBook : ContractId LibraryBook
            controller borrower 
            do
                create LibraryBook with ..


template CustodyOffer
    with
        details : BookDetails
        library : Party
        newLibrary : Party
    where
        signatory library
        observer newLibrary

        choice AcceptCustodyOffer : ContractId LibraryBook
            controller newLibrary
            do
                create LibraryBook with library = newLibrary; ..
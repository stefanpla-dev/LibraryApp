module LibraryBook where --defines the module name LibraryBook where the app logic resides

import Daml.Script
import DA.Time
import DA.Date (Month(Jan), date, addDays, datetime, toGregorian)
import DA.Numeric (roundNumeric)

data BookDetails = BookDetails 
    with
        title : Text
        author : Text
        isbn : Text
    deriving (Eq, Show, Ord)


template LibraryBook --defines LibraryBook contract structure
    with --declares the contract's fields (text for title/author, Party for parties)
        details : BookDetails
        library : Party
    where
        signatory library --authorization: who can do what

        choice Offer : ContractId OfferedLibraryBook
            with 
                borrower : Party
                dueDate : Date
                expiration : Time
            controller library
            do
                let 
                    (year, month, day) = toGregorian $ dueDate `addDays` 1
                    due = datetime year month day 4 0 0 
                create OfferedLibraryBook with ..


template OfferedLibraryBook
    with 
        details : BookDetails
        library : Party
        borrower : Party
        due : Time
        expiration : Time --added to create Expire choice below.
    where   
        signatory library
        observer borrower

        choice Accept : ContractId CheckedOutLibraryBook
            controller borrower
            do
                checkedOut <- getTime
                assert (checkedOut <= expiration)
                create CheckedOutLibraryBook with ..

        choice Decline : ContractId LibraryBook
            controller borrower
            do
                create LibraryBook with ..

        choice Expire : ContractId LibraryBook --if a certain period of time passes without action, then the library can exercise its Expire choice and permit the book to be borrowed by other borrowers. test below.
            controller library
            do
                now <- getTime
                assert (now >= expiration) 
                create LibraryBook with ..


template CheckedOutLibraryBook
    with
        details : BookDetails
        library : Party
        borrower : Party
        due : Time
        checkedOut : Time
    where 
        signatory library, borrower

        choice Return : ContractId LibraryBook
            controller borrower
            do
                create LibraryBook with ..
        
        choice ChargeLateFee : ContractId OverdueLibraryBook
            controller library
            do
                now <- getTime
                assert (now >= due)
                create OverdueLibraryBook with lastAccruedDate = now, fee = 0, ..

template OverdueLibraryBook
    with
        details : BookDetails
        library : Party
        borrower : Party
        due : Time
        checkedOut : Time
        lastAccruedDate : Time
        fee : Int
    where 
        signatory library
        observer borrower

        choice IncrementFee : ContractId OverdueLibraryBook
            controller library
            do
                now <- getTime
                let relDiff = now `subTime` due -- returns time offset between two instances as a RelTime
                
                let totalMicroseconds = convertRelTimeToMicroseconds relDiff -- convert that RelTime to microseconds
                let microsecondsPerDay = convertRelTimeToMicroseconds (days 1)

                let daysLateNumeric : Decimal = (intToNumeric totalMicroseconds) / (intToNumeric microsecondsPerDay)

                let daysLate = truncate (roundNumeric 0 RoundingCeiling daysLateNumeric)
                
                let newFee = fee + (daysLate * 2) -- $2 per day late fee 
                -- want to stay up at night? Best way to represent dollars is to two decimal places, or even four places to account for rounding errors.
                -- 
                
                create OverdueLibraryBook with fee = newFee, lastAccruedDate = now, ..

        choice PayFee : ContractId OverdueLibraryBook 
            controller borrower
            do
                create OverdueLibraryBook with fee = 0, .. -- payment processing?

        choice ReturnOverdueBook : ContractId LibraryBook
            controller borrower 
            do
                create LibraryBook with ..

libraryAcceptScenario = script do 
    library <- allocateParty "Columbus Metropolitan Library"
    borrower <- allocateParty "Stefan"

    let bookDetails = BookDetails with
            title = "Blue Highways"
            author = "William Least Heat-Moon"
            isbn = "987654321"

    libraryBookCid <- submit library do
        createCmd LibraryBook with 
            details = bookDetails
            library = library 

    currentTime <- getTime
    let dueDate = date 1970 Jan 14
    let expiration = addRelTime currentTime (minutes 15)

    offeredBookCid <- submit library do
        exerciseCmd libraryBookCid Offer with
            borrower = borrower
            dueDate = dueDate
            expiration = expiration

    acceptedBookCid <- submit borrower do
        exerciseCmd offeredBookCid Accept

    pure ()

--needed new test scenario as the test above archives the contract once the Accept choice is exercised.
libraryDeclineScenario = script do 
    library <- allocateParty "Columbus Metropolitan Library"
    borrower <- allocateParty "Stefan"

    let bookDetails = BookDetails with
            title = "Blue Highways"
            author = "William Least Heat-Moon"
            isbn = "987654321"

    libraryBookCid <- submit library do
        createCmd LibraryBook with 
            details = bookDetails
            library = library 

    currentTime <- getTime
    let dueDate = date 1970 Jan 14
    let expiration = addRelTime currentTime (minutes 15)

    offeredBookCid <- submit library do
        exerciseCmd libraryBookCid Offer with
            borrower = borrower
            dueDate = dueDate
            expiration = expiration

    declinedBookCid <- submit borrower do
        exerciseCmd offeredBookCid Decline

    pure ()

expireScenario = script do
    library <- allocateParty "Columbus Metropolitan Library"
    borrower <- allocateParty "Stefan"

    let bookDetails = BookDetails with
            title = "Blue Highways"
            author = "William Least Heat-Moon"
            isbn = "987654321"

    libraryBookCid <- submit library do
        createCmd LibraryBook with 
            details = bookDetails
            library = library 

    currentTime <- getTime
    let dueDate = date 1970 Jan 14
    let expiration = addRelTime currentTime (minutes 15)

    offeredBookCid <- submit library do
        exerciseCmd libraryBookCid Offer with
            borrower = borrower
            dueDate = dueDate
            expiration = expiration

    setTime (addRelTime currentTime (minutes 16)) --ensure that correct period of time has passed before exercising the Expire choice on the offeredLibraryBook.

    declinedBookCid <- submit library do
        exerciseCmd offeredBookCid Expire
    
    pure ()
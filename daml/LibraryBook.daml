module LibraryBook where --defines the module name LibraryBook where the app logic resides

import Daml.Script
import DA.Time


data BookDetails = BookDetails 
    with
        title : Text
        author : Text
        isbn : Text
    deriving (Eq, Show)


template LibraryBook --defines LibraryBook contract structure
    with --declares the contract's fields (text for title/author, Party for parties)
        details : BookDetails
        library : Party
    where
        signatory library --authorization: who can do what


        choice Offer : ContractId OfferedLibraryBook
            with 
                borrower : Party
                dueDate : Time
                expiration : Time
            controller library
            do
                create OfferedLibraryBook with ..


template OfferedLibraryBook
    with 
        details : BookDetails
        library : Party
        borrower : Party
        dueDate : Time
        expiration : Time --added to create Expire choice below.
    where   
        signatory library
        observer borrower

        choice Accept : ContractId CheckedOutLibraryBook
            controller borrower
            do
                checkedOut <- getTime
                assert (checkedOut <= expiration)
                create CheckedOutLibraryBook with ..

        choice Decline : ContractId DeclinedLibraryBook
            controller borrower
            do
                create DeclinedLibraryBook with ..

        choice Expire : ContractId DeclinedLibraryBook --if a certain period of time passes without action, then the library can exercise its Expire choice and create a DeclinedLibraryBook. test below.
            controller library
            do
                now <- getTime
                assert (now >= expiration) 
                create DeclinedLibraryBook with ..


template CheckedOutLibraryBook
    with
        details : BookDetails
        library : Party
        borrower : Party
        dueDate : Time
        checkedOut : Time
    where 
        signatory library, borrower

        choice Return : ContractId LibraryBook
            controller borrower
            do
                create LibraryBook with ..


template DeclinedLibraryBook
    with 
        details : BookDetails
        library : Party
        borrower : Party
        expiration : Time
    where 
        signatory library

        choice Shelve : ContractId LibraryBook --book can be returned back to the shelf and made available for other borrowers. test below.
            controller library
            do
                create LibraryBook with .. 


libraryAcceptScenario = script do 
    library <- allocateParty "Columbus Metropolitan Library"
    borrower <- allocateParty "Stefan"

    let bookDetails = BookDetails with
            title = "Blue Highways"
            author = "William Least Heat-Moon"
            isbn = "987654321"

    libraryBookCid <- submit library do
        createCmd LibraryBook with 
            details = bookDetails
            library = library 

    currentTime <- getTime
    let dueDate = addRelTime currentTime (days 14)
    let expiration = addRelTime currentTime (minutes 15)

    offeredBookCid <- submit library do
        exerciseCmd libraryBookCid Offer with
            borrower = borrower
            dueDate = dueDate
            expiration = expiration

    acceptedBookCid <- submit borrower do
        exerciseCmd offeredBookCid Accept

    pure ()

--needed new test scenario as the test above archives the contract once the Accept choice is exercised.
libraryDeclineScenario = script do 
    library <- allocateParty "Columbus Metropolitan Library"
    borrower <- allocateParty "Stefan"

    let bookDetails = BookDetails with
            title = "Blue Highways"
            author = "William Least Heat-Moon"
            isbn = "987654321"

    libraryBookCid <- submit library do
        createCmd LibraryBook with 
            details = bookDetails
            library = library 

    currentTime <- getTime
    let dueDate = addRelTime currentTime (days 14)
    let expiration = addRelTime currentTime (minutes 15)

    offeredBookCid <- submit library do
        exerciseCmd libraryBookCid Offer with
            borrower = borrower
            dueDate = dueDate
            expiration = expiration

    declinedBookCid <- submit borrower do
        exerciseCmd offeredBookCid Decline

    pure ()

declineAndShelveScenario = script do
    library <- allocateParty "Columbus Metropolitan Library"
    borrower <- allocateParty "Stefan"

    let bookDetails = BookDetails with
            title = "Blue Highways"
            author = "William Least Heat-Moon"
            isbn = "987654321"

    libraryBookCid <- submit library do
        createCmd LibraryBook with 
            details = bookDetails
            library = library 

    currentTime <- getTime
    let dueDate = addRelTime currentTime (days 14)
    let expiration = addRelTime currentTime (minutes 15)

    offeredBookCid <- submit library do
        exerciseCmd libraryBookCid Offer with
            borrower = borrower
            dueDate = dueDate
            expiration = expiration

    setTime (addRelTime currentTime (minutes 16)) --ensure that correct period of time has passed before exercising the Expire choice on the offeredLibraryBook.

    declinedBookCid <- submit library do
        exerciseCmd offeredBookCid Expire
    
    shelvedBookCid <- submit library do
        exerciseCmd declinedBookCid Shelve
    
    pure ()


--what if the borrower declines the offer?
    --the OfferedLibraryBook needs a new choice, which is to decline the offered book. This will require writing a new template, a DeclinedLibraryBook.
    --I will code this up for the sake of the exercise but I do wonder what the practical use-case is, if anything. Why would a borrower initiate the process of checking out a book only to decline it?
        --Given the scenario, does it make more sense for the OfferedLibraryBook to become a SelectedLibraryBook, where the borrower is a signatory and the library is an observer? The SelectedBook then has two choices for which the library is the controller - to confirm (and create a CheckedOutBook) or to decline (create a DeclinedLibraryBook). Maybe code up a second version of the LibraryBook template with this in mind and show to Leve?

--what if the offered book remains in limbo? the borrower neither declines nor accepts? 
    --is there a way to place a time limit on the offer? as in, if it is offered and no action is taken in a certain period of time, then the offer is rescinded (and, effectively, a DeclinedBook is created)?

--leventebarczyda (?) for GitHub
